"use strict";(self.webpackChunkcf_functions=self.webpackChunkcf_functions||[]).push([[137],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>d});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),c=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=c(e.components);return r.createElement(l.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),m=c(n),d=a,f=m["".concat(l,".").concat(d)]||m[d]||p[d]||o;return n?r.createElement(f,i(i({ref:t},u),{},{components:n})):r.createElement(f,i({ref:t},u))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=m;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:a,i[1]=s;for(var c=2;c<o;c++)i[c]=n[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},5868:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>p,frontMatter:()=>o,metadata:()=>s,toc:()=>c});var r=n(7462),a=(n(7294),n(3905));const o={},i="Testing",s={unversionedId:"usage/testing",id:"usage/testing",title:"Testing",description:"Writing tests is important for any code, however it's particularly important for CloudFront Functions given the vastly",source:"@site/docs/usage/testing.mdx",sourceDirName:"usage",slug:"/usage/testing",permalink:"/cf-functions/docs/usage/testing",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"docs",previous:{title:"Deployment",permalink:"/cf-functions/docs/usage/deployment"},next:{title:"Environment Variables",permalink:"/cf-functions/docs/usage/environment-variables"}},l={},c=[{value:"Test File",id:"test-file",level:2},{value:"Test Runner",id:"test-runner",level:2}],u={toc:c};function p(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"testing"},"Testing"),(0,a.kt)("p",null,"Writing tests is important for any code, however it's particularly important for CloudFront Functions given the vastly\n",(0,a.kt)("a",{parentName:"p",href:"https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/functions-javascript-runtime-features.html"},"reduced functional capacity"),"\nof the CloudFront JS runtime. Writing function tests ensures code meets the functional requirements it was written for,\nbut also that it's compatible with the CloudFront JS runtime."),(0,a.kt)("p",null,"A test file can be declared alongside a functions handler code via the ",(0,a.kt)("a",{parentName:"p",href:"./configuration"},"configuration file")," - refer to\nthe config docs for more information."),(0,a.kt)("admonition",{type:"info"},(0,a.kt)("p",{parentName:"admonition"},"While it's highly recommended to include handler tests, it's not required. Simply exclude the ",(0,a.kt)("inlineCode",{parentName:"p"},"test")," command from your\nCI/CD workflow.")),(0,a.kt)("h2",{id:"test-file"},"Test File"),(0,a.kt)("p",null,"A handler test file consists of an array of test case objects. The array must be the default export of the file. An\nexample test file is included below."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},'// test.ts\n\nexport default [\n    {\n        name: `It should add x-custom-header with value \'Cool beans!\'.`,\n        given: {\n            request: {\n                method: "GET",\n                uri: "https://mysite.com"\n            },\n        },\n        expect: {\n            request: {\n                method: "GET",\n                uri: "https://mysite.com",\n                headers: {\n                    "x-custom-header": {\n                        value: "Cool beans!",\n                    },\n                },\n            },\n        },\n    }\n];\n')),(0,a.kt)("p",null,"A test case object consists of the following properties. For those familiar with Jest, this should look somewhat familiar.\nUse the full power of Typescript in generating test cases dynamically."),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null},"Name"),(0,a.kt)("th",{parentName:"tr",align:null},"Type"),(0,a.kt)("th",{parentName:"tr",align:null},"Description"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"name"),(0,a.kt)("td",{parentName:"tr",align:null},"String"),(0,a.kt)("td",{parentName:"tr",align:null},"The name of the test case.")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"given"),(0,a.kt)("td",{parentName:"tr",align:null},"Object"),(0,a.kt)("td",{parentName:"tr",align:null},"A partial object imitating an incoming CloudFront request event.")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"expect"),(0,a.kt)("td",{parentName:"tr",align:null},"Object"),(0,a.kt)("td",{parentName:"tr",align:null},"An object imitating the resulting CloudFront request event after the function code has run.")))),(0,a.kt)("p",null,"The object declared in ",(0,a.kt)("inlineCode",{parentName:"p"},"given")," is merged with a ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/burketyler/cf-functions/blob/master/src/cli/commands/test/consts.ts"},"default request event"),"\nto prevent test cases from needing to specify the entire object on every test case. Just override the fields related to\nthe test case with real values."),(0,a.kt)("p",null,"Refer to the ",(0,a.kt)("a",{parentName:"p",href:"https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/functions-event-structure.html"},"AWS documentation"),"\nfor more information relating to CloudFront event structures."),(0,a.kt)("h2",{id:"test-runner"},"Test Runner"),(0,a.kt)("p",null,"CF-Functions includes a test runner compatible with the CloudFront test API, making it easy to create a test suite\nand automate test runs during deployments."),(0,a.kt)("p",null,"Use the below command to run tests against a specific environment."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell"},"cf-functions test -s DEVELOPMENT\n")),(0,a.kt)("video",{width:"100%",controls:!0},(0,a.kt)("source",{src:"/cf-functions/video/test-example.mp4",type:"video/mp4"})),(0,a.kt)("p",null,"Use ",(0,a.kt)("inlineCode",{parentName:"p"},"cf-functions help")," for more information on commands."))}p.isMDXComponent=!0}}]);
"use strict";(self.webpackChunkcf_functions=self.webpackChunkcf_functions||[]).push([[513],{3905:(t,e,n)=>{n.d(e,{Zo:()=>s,kt:()=>m});var a=n(7294);function r(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function i(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(t);e&&(a=a.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,a)}return n}function l(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?i(Object(n),!0).forEach((function(e){r(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function o(t,e){if(null==t)return{};var n,a,r=function(t,e){if(null==t)return{};var n,a,r={},i=Object.keys(t);for(a=0;a<i.length;a++)n=i[a],e.indexOf(n)>=0||(r[n]=t[n]);return r}(t,e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(t);for(a=0;a<i.length;a++)n=i[a],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(t,n)&&(r[n]=t[n])}return r}var u=a.createContext({}),p=function(t){var e=a.useContext(u),n=e;return t&&(n="function"==typeof t?t(e):l(l({},e),t)),n},s=function(t){var e=p(t.components);return a.createElement(u.Provider,{value:e},t.children)},c={inlineCode:"code",wrapper:function(t){var e=t.children;return a.createElement(a.Fragment,{},e)}},d=a.forwardRef((function(t,e){var n=t.components,r=t.mdxType,i=t.originalType,u=t.parentName,s=o(t,["components","mdxType","originalType","parentName"]),d=p(n),m=r,f=d["".concat(u,".").concat(m)]||d[m]||c[m]||i;return n?a.createElement(f,l(l({ref:e},s),{},{components:n})):a.createElement(f,l({ref:e},s))}));function m(t,e){var n=arguments,r=e&&e.mdxType;if("string"==typeof t||r){var i=n.length,l=new Array(i);l[0]=d;var o={};for(var u in e)hasOwnProperty.call(e,u)&&(o[u]=e[u]);o.originalType=t,o.mdxType="string"==typeof t?t:r,l[1]=o;for(var p=2;p<i;p++)l[p]=n[p];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},349:(t,e,n)=>{n.r(e),n.d(e,{assets:()=>u,contentTitle:()=>l,default:()=>c,frontMatter:()=>i,metadata:()=>o,toc:()=>p});var a=n(7462),r=(n(7294),n(3905));const i={},l="Configuration",o={unversionedId:"usage/configuration",id:"usage/configuration",title:"Configuration",description:"A configuration file is required to run any CLI commands. This file contains function configuration and",source:"@site/docs/usage/configuration.mdx",sourceDirName:"usage",slug:"/usage/configuration",permalink:"/cf-functions/docs/usage/configuration",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"docs",previous:{title:"Getting started",permalink:"/cf-functions/docs/getting-started"},next:{title:"Typescript",permalink:"/cf-functions/docs/usage/typescript"}},u={},p=[{value:"Example",id:"example",level:2},{value:"Reference",id:"reference",level:2}],s={toc:p};function c(t){let{components:e,...n}=t;return(0,r.kt)("wrapper",(0,a.Z)({},s,n,{components:e,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"configuration"},"Configuration"),(0,r.kt)("p",null,"A configuration file is required to run any ",(0,r.kt)("a",{parentName:"p",href:"./usage/cli"},"CLI")," commands. This file contains function configuration and\nacts as a deployment manifest. For those familiar with the Serverless framework, it's analogous to a serverless.yml file."),(0,r.kt)("p",null,"The file must ",(0,r.kt)("inlineCode",{parentName:"p"},"export default")," an object matching the ",(0,r.kt)("inlineCode",{parentName:"p"},"Config")," type."),(0,r.kt)("p",null,"By default, the framework will look for a ",(0,r.kt)("inlineCode",{parentName:"p"},"cf-functions.ts")," file in the current working directory when running a CLI\ncommand. This behaviour can be modified by including the ",(0,r.kt)("inlineCode",{parentName:"p"},"-c {filepath}")," argument to any command."),(0,r.kt)("h2",{id:"example"},"Example"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},'import { Config, DistributionEventType } from "cf-functions";\n\nexport const config: Config = {\n  pathPrefix: "/src/handlers",\n  defaultRuntime: "cloudfront-js-1.0",\n  functions: {\n    AddHeader: {\n      handler: "/add-header/index.ts",\n      test: "/add-header/test.ts",\n      description:\n          "Adds the x-custom-header HTTP header to request.",\n      associations: [\n        {\n          distributionId: process.env.DISTRIBUTION_ID!,\n          eventType: DistributionEventType.VIEWER_REQUEST,\n          behaviourPattern: "default",\n        },\n      ],\n    },\n  },\n};\n\nexport default config;\n')),(0,r.kt)("h2",{id:"reference"},"Reference"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"),(0,r.kt)("th",{parentName:"tr",align:null},"isRequired"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"pathPrefix"),(0,r.kt)("td",{parentName:"tr",align:null},"String"),(0,r.kt)("td",{parentName:"tr",align:null},"Path segment to prepend to any function handler or test file paths."),(0,r.kt)("td",{parentName:"tr",align:null},"No")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"defaultRuntime"),(0,r.kt)("td",{parentName:"tr",align:null},"String"),(0,r.kt)("td",{parentName:"tr",align:null},"The CloudFront Function runtime to be used by each function."),(0,r.kt)("td",{parentName:"tr",align:null},"No")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"functions"),(0,r.kt)("td",{parentName:"tr",align:null},"Array"),(0,r.kt)("td",{parentName:"tr",align:null},"Object map containing list of functions."),(0,r.kt)("td",{parentName:"tr",align:null},"Yes")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"functions","[Name]"),(0,r.kt)("td",{parentName:"tr",align:null},"Key"),(0,r.kt)("td",{parentName:"tr",align:null},"Each object key represents the name of a function."),(0,r.kt)("td",{parentName:"tr",align:null},"Yes")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"functions","[Name]",".handler"),(0,r.kt)("td",{parentName:"tr",align:null},"String"),(0,r.kt)("td",{parentName:"tr",align:null},"The file path to the function handler code."),(0,r.kt)("td",{parentName:"tr",align:null},"Yes")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"functions","[Name]",".test"),(0,r.kt)("td",{parentName:"tr",align:null},"String"),(0,r.kt)("td",{parentName:"tr",align:null},"The file path to the function test code."),(0,r.kt)("td",{parentName:"tr",align:null},"No")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"functions","[Name]",".description"),(0,r.kt)("td",{parentName:"tr",align:null},"String"),(0,r.kt)("td",{parentName:"tr",align:null},"A brief description of what the function does. This will appear in the AWS console."),(0,r.kt)("td",{parentName:"tr",align:null},"No")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"functions","[Name]",".isEnabled"),(0,r.kt)("td",{parentName:"tr",align:null},"Boolean"),(0,r.kt)("td",{parentName:"tr",align:null},"Determines whether the function is ignored by CLI commands (defaults true)"),(0,r.kt)("td",{parentName:"tr",align:null},"No")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"functions","[Name]",".associations"),(0,r.kt)("td",{parentName:"tr",align:null},"Array"),(0,r.kt)("td",{parentName:"tr",align:null},"The CloudFront Distributions that the function is associated with."),(0,r.kt)("td",{parentName:"tr",align:null},"Yes")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"functions","[Name]",".associations","[0]",".distributionId"),(0,r.kt)("td",{parentName:"tr",align:null},"String"),(0,r.kt)("td",{parentName:"tr",align:null},"The unique identifier of the CloudFront Distribution (found in the AWS console)"),(0,r.kt)("td",{parentName:"tr",align:null},"Yes")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"functions","[Name]",".associations","[0]",".eventType"),(0,r.kt)("td",{parentName:"tr",align:null},"String"),(0,r.kt)("td",{parentName:"tr",align:null},'The CloudFront event which triggers the function - "viewer-request" or "viewer-response"'),(0,r.kt)("td",{parentName:"tr",align:null},"Yes")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"functions","[Name]",".associations","[0]",".behaviourPattern"),(0,r.kt)("td",{parentName:"tr",align:null},"String"),(0,r.kt)("td",{parentName:"tr",align:null},"The string pattern of the CloudFront Distribution behaviour to associate the function with."),(0,r.kt)("td",{parentName:"tr",align:null},"Yes")))))}c.isMDXComponent=!0}}]);